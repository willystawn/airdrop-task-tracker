// This file will be generated by Supabase CLI.
// Run: npx supabase gen types typescript --project-id <YOUR_PROJECT_ID> --schema public > types_db.ts
// Replace <YOUR_PROJECT_ID> with your actual Supabase project ID.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      global_tags: {
        Row: {
          id: string
          user_id: string
          text: string
          color_classes: string
          created_at: string
        }
        Insert: {
          id?: string
          user_id: string
          text: string
          color_classes: string
          created_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          text?: string
          color_classes?: string
          created_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "global_tags_user_id_fkey"
            columns: ["user_id"]
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          }
        ]
      }
      managed_tasks: {
        Row: {
          id: string
          user_id: string
          title: string
          description: string | null
          logo_url: string | null
          is_completed: boolean
          category: string // Corresponds to TaskResetCategory enum
          specific_reset_days: number[] | null
          specific_reset_hours: number | null // New field
          last_completion_timestamp: string | null
          next_reset_timestamp: string | null
          tags: string[] | null
          sub_tasks: Json | null // Array of SubTask objects
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          user_id: string
          title: string
          description?: string | null
          logo_url?: string | null
          is_completed?: boolean
          category: string
          specific_reset_days?: number[] | null
          specific_reset_hours?: number | null // New field
          last_completion_timestamp?: string | null
          next_reset_timestamp?: string | null
          tags?: string[] | null
          sub_tasks?: Json | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          title?: string
          description?: string | null
          logo_url?: string | null
          is_completed?: boolean
          category?: string
          specific_reset_days?: number[] | null
          specific_reset_hours?: number | null // New field
          last_completion_timestamp?: string | null
          next_reset_timestamp?: string | null
          tags?: string[] | null
          sub_tasks?: Json | null
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "managed_tasks_user_id_fkey"
            columns: ["user_id"]
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          }
        ]
      }
      profiles: {
        Row: {
          id: string
          username: string
          is_admin: boolean | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id: string
          username: string
          is_admin?: boolean | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          username?: string
          is_admin?: boolean | null
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      handle_new_user: {
        Args: Record<PropertyKey, never>
        Returns: unknown
      }
      trigger_set_timestamp: {
        Args: Record<PropertyKey, never>
        Returns: unknown
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// Placeholder for your actual SubTask interface if it's part of Json fields
// export interface SubTask {
//   title: string;
//   isCompleted: boolean;
//   specific_reset_hours?: number | null; // Added for completeness, though subtask details are in main types.ts
// }